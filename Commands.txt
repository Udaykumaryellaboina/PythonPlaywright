===============================
‚úÖ STEP 1: SETUP PROJECT STRUCTURE
===============================

# Create and enter project directory
mkdir playwright_bdd_framework
cd playwright_bdd_framework

# Create virtual environment
python -m venv venv

# Activate the environment
# macOS/Linux:
source venv/bin/activate
# Windows:
venv\Scripts\activate

===============================
‚úÖ STEP 2: INSTALL REQUIRED PACKAGES
===============================

# Core packages
pip install playwright behave pytest pytest-bdd

# Optional: reporting and configuration
pip install allure-behave           # Allure support (optional)
pip install behave-html-formatter  # For HTML reporting
pip install python-dotenv           # For environment config files

# Install Playwright browsers
python -m playwright install

# (Optional) Install extra packages if needed
pip install pytest-xdist            # For parallel execution
pip install pytest-html             # For HTML reporting with pytest

===============================
‚úÖ HOW TO RUN TESTS
===============================

‚ñ∂Ô∏è Headless Mode:
python tests/test_runner.py --tag="@login"

üõ†Ô∏è Debug/Headful Mode:
python tests/test_runner.py --tag="@login" --debug

===============================
‚úÖ BEHAVE TAG FILTERING
===============================

# Run only @login tag
behave --tags=@login

# Run multiple tags (AND condition)
behave --tags="@login and @smoke"

# Run all tests with HTML report
behave -f pretty -f behave_html_formatter:HTMLFormatter -o reports/html_report.html

# Open report
start reports/html_report.html     # Windows
open reports/html_report.html      # macOS/Linux

===============================
‚úÖ GENERATE HTML REPORTS
===============================

# From CLI
behave -f pretty -f behave_html_formatter:HTMLFormatter -o reports/html_report.html --tags=@login

# HTML reports will be generated per feature in:
reports/login.html
reports/search.html

# Open individual reports in browser
start reports/login.html           # Windows
open reports/login.html            # macOS/Linux

===============================
‚úÖ CONFIGURE test_runner.py
===============================

# üõ† Step 1: Set Your Tags
# Inside tests/test_runner.py, set your expression:
TAG_EXPRESSION = "@login or @smoke"

# Examples:
#   TAG_EXPRESSION = "@tag1 or @tag2"
#   TAG_EXPRESSION = "@tag1 and @tag2"
#   TAG_EXPRESSION = "not @skip"
#   TAG_EXPRESSION = "@all"

# üõ† Step 2: Run Tests
python Tests/test_runner.py

# üìÅ Reports will be generated in:
reports/login.html
reports/search.html

===============================
‚úÖ USING THE TKINTER GUI
===============================

# Save this script as:
tests/test_runner_gui.py

# ‚ñ∂Ô∏è Run GUI:
python tests/test_runner_gui.py

===============================
‚úÖ COMBINE MULTIPLE HTML REPORTS
===============================

# After running tests:
python combine_html_reports.py

# Open combined report:
start reports/combined_report.html      # Windows
open reports/combined_report.html       # macOS/Linux

===============================
‚úÖ SUMMARY OF FEATURES
===============================

Feature                         Supported
------------------------------  ------------------
Tag-based filtering             ‚úÖ Yes
AND/OR tag expressions          ‚úÖ Yes
HTML reports per feature        ‚úÖ Yes
Parallel execution              ‚úÖ Yes
Friendly CLI config             ‚úÖ Yes
GUI-based runner                ‚úÖ Yes
Combined HTML report            ‚úÖ Yes

===============================
‚úÖ SAMPLE TERMINAL OUTPUT
===============================

üöÄ Running with tag filter: @login
üß™ Found 2 feature file(s)
‚ñ∂Ô∏è Running: behave features/login.feature --tags="@login"
...
‚úÖ Test execution finished
üìÅ Reports available at: reports/

